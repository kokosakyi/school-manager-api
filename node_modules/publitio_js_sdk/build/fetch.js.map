{"version":3,"sources":["../src/fetch.js"],"names":["InvalidJSONError","responseData","Error","FetchService","url","method","validateStatus","then","res","data","formData","req","runningInNode","axios","post","getBuffer","headers","getHeaders","maxContentLength","Infinity","fetchService"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,gB;;;;;AACJ,4BAAYC,YAAZ,EAA0B;AAAA;;AAAA,yFAClB,8FACA,kGADA,GAEAA,YAHkB;AAIzB;;;mBAL4BC,K;;IAQzBC,Y;;;;;;;;;4BACKC,G,EAAKC,M,EAAQ;AACpB,aAAO,oBAAM;AACXA,QAAAA,MAAM,EAANA,MADW;AAEXD,QAAAA,GAAG,EAAHA,GAFW;AAGXE,QAAAA,cAAc,EAAE;AAAA,iBAAM,IAAN;AAAA;AAHL,OAAN,EAKNC,IALM,CAKD,UAAAC,GAAG,EAAI;AACX,YAAI,OAAOA,GAAG,CAACC,IAAX,KAAoB,QAAxB,EACE,MAAM,IAAIT,gBAAJ,CAAqBQ,GAAG,CAACC,IAAzB,CAAN;AACF,eAAOD,GAAG,CAACC,IAAX;AACD,OATM,CAAP;AAUD;;;+BAEWC,Q,EAAUN,G,EAAK;AACzB,UAAIO,GAAJ;;AAEA,UAAIC,qBAAJ,EAAmB;AACjBD,QAAAA,GAAG,GAAGE,eAAMC,IAAN,CAAWV,GAAX,EAAgBM,QAAQ,CAACK,SAAT,EAAhB,EAAsC;AAC1CC,UAAAA,OAAO,EAAEN,QAAQ,CAACO,UAAT,EADiC;AAE1CC,UAAAA,gBAAgB,EAAEC,QAFwB;AAG1Cb,UAAAA,cAAc,EAAE;AAAA,mBAAM,IAAN;AAAA;AAH0B,SAAtC,CAAN;AAKD,OAND,MAMO;AACLK,QAAAA,GAAG,GAAGE,eAAMC,IAAN,CAAWV,GAAX,EAAgBM,QAAhB,EAA0B;AAC9BQ,UAAAA,gBAAgB,EAAEC,QADY;AAE9Bb,UAAAA,cAAc,EAAE;AAAA,mBAAM,IAAN;AAAA;AAFc,SAA1B,CAAN;AAID;;AAED,aAAOK,GAAG,CAACJ,IAAJ,CAAS,UAAAC,GAAG,EAAI;AACrB,YAAI,OAAOA,GAAG,CAACC,IAAX,KAAoB,QAAxB,EACE,MAAM,IAAIT,gBAAJ,CAAqBQ,GAAG,CAACC,IAAzB,CAAN;AACF,eAAOD,GAAG,CAACC,IAAX;AACD,OAJM,CAAP;AAKD;;;;;;AAGI,IAAMW,YAAY,GAAG,IAAIjB,YAAJ,EAArB","sourcesContent":["import axios from 'axios'\nimport { runningInNode } from './helper'\n\nclass InvalidJSONError extends Error {\n  constructor(responseData) {\n    super(\"The server was expected to respond with JSON, but didn't. This might be because you used \" +\n          \"an invalid endpoint URL, an invalid HTTP method, or due to an internal server error. Response:\\n\" +\n          responseData)\n  }\n}\n\nclass FetchService {\n  callApi (url, method) {\n    return axios({\n      method,\n      url,\n      validateStatus: () => true,\n    })\n    .then(res => {\n      if (typeof res.data === 'string')\n        throw new InvalidJSONError(res.data)\n      return res.data\n    })\n  }\n\n  uploadFile (formData, url) {\n    let req\n\n    if (runningInNode) {\n      req = axios.post(url, formData.getBuffer(), {\n        headers: formData.getHeaders(),\n        maxContentLength: Infinity,\n        validateStatus: () => true,\n      })\n    } else {\n      req = axios.post(url, formData, {\n        maxContentLength: Infinity,\n        validateStatus: () => true,\n      })\n    }\n\n    return req.then(res => {\n      if (typeof res.data === 'string')\n        throw new InvalidJSONError(res.data)\n      return res.data\n    })\n  }\n}\n\nexport const fetchService = new FetchService()\n"],"file":"fetch.js"}